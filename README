NAME
    Test::Chado - Build,configure and test chado database backed modules and
    applications

VERSION
    version 1.0.0

SYNOPSIS
   Write build script(Build.PL) for your module or web application:
       use Module::Build::Chado;

       my $build = Module::Build::Chado->new(
                     module_name => 'MyChadoApp', 
                     license => 'perl', 
                     dist_abstract => 'My chado module'
                     dist_version => '1.0'

       );

      $build->create_build_script;

   Then from the command line:
      perl Build.PL && ./Build test(default is a temporary SQLite database)

    It will deploy chado schema in a SQLite database, load fixtures and run
    all tests)

   In each of the test file(.t) access the schema(Bio::Chado::Schema) object
       use Module::Build::Chado;

       my $schema = Module::Build::Chado->current->schema;

       #do something with it ....

       $schema->resultset('Organism::Organism')->....

   Use for other database backend
    PostgreSQL

      ./Build test --dsn "dbi:Pg:dbname=mychado" --user tucker --password booze

    Oracle

       ./Build test --dsn "dbi:Oracle:sid=myoracle" --user tucker --password hammer

DESCRIPTION
    This is subclass of Module::Build to configure, build and test chado
    <http://gmod.org/wiki/Chado> database backed perl modules and
    applications. During the /Build test testing phase it loads some default
    fixtures which can be accessed in every test(.t) file using standard
    DBIx::Class API.

  Default fixtures loaded
    List of organisms
        Look at the organism.yaml in the shared folder

    Relationship ontology
        OBO relationship types, available here
        <http://bioportal.bioontology.org/ontologies/1042>.

    Sequence ontology
        Sequence types and features, available here
        <http://bioportal.bioontology.org/ontologies/1109>

  Accessing fixtures data in test(.t) files
    Get a Bio::Chado::Schema aka DBIx::Class object
        my $schema = Module::Build->current->schema;

        isa_ok($schema, 'Bio::Chado::Schema');

    Access them using DBIx::Class API
          my $row = $schema->resultset('Organism::Organism')->find({species => 'Homo',  genus =>
        'sapiens'});

          my $resultset = $schema->resultset('Organism::Organism')->search({});

          my $relonto = $schema->resultset('Cv::Cv')->find({'name' => 'relationship'});

          my $seqonto = $schema->resultset('Cv::Cv')->find({'name' => 'sequence'});

          my $cvterm_rs = $seqonto->cvterms;
  
          while(my $cvterm = $cvterm_rs->next) {
            .....
          }

          You probably will not be accessing them too often,  but mostly needed to load other test
          fixtures.

  Loading custom fixtures
    *   Create your own subclass and implement either or both of two methods
        before_all_fixtures and after_all_fixtures

        before_all_fixtures
            This code will run before any fixture is loaded

        after_all_fixtures
            This code will run after organism data, relationship and
            sequence ontologies are loaded

           package MyBuilder;
           use base qw/Module::Build::Chado/;

           sub before_all_fixtures {
              my ($self) = @_;
           }

           sub before_all_fixtures {
              my ($self) = @_;
           }

    *   All the attributes and methods of Module::Build and
        Module::Build::Chado API become available through *$self*.

ATTRIBUTES
  schema
    A Bio::Chado::Schema object.

  dsn
    Database connect string, defaults to a temporary SQLite database.

  user
    Database user, not needed for SQLite backend.

  password
    Database password, not needed for SQLite backend.

  superuser
    Database super user, in case the regular use do not have enough
    permissions for manipulating the database schema. It defaults to the
    user attribute.

  superpassword
    Similar concept as superuser

  ddl
    DDL file for particular backend, by default comes for SQLite, Postgresql
    and Oracle.

  organism_fixuture
    Fixture for loading organisms, by default the distribution comes with a
    organism.yaml file.

  rel_fixuture
    Relation ontology file in obo_xml format. The distribution includes a
    relationship.obo_xml file.

  so_fixuture
    Sequence ontology file in obo_xml format. By default, it includes
    sofa.obo_xml file.

METHODS
  connect_hash
    Returns a hash with the following connection specific keys ...

    dsn
    user
    password
    dbi_attributes

  connect_info
    Returns an 4 elements array with connection arguments identical to DBI's
    connect method.

API
AUTHOR
    Siddhartha Basu <biosidd@gmail.com>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2011 by Siddhartha Basu.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

